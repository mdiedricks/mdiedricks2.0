webpackHotUpdate("mdiedricks2.0",{

/***/ "./packages/mdiedricks-theme/src/themefiles/home.js":
/*!**********************************************************!*\
  !*** ./packages/mdiedricks-theme/src/themefiles/home.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./packages/mdiedricks-theme/node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./link */ \"./packages/mdiedricks-theme/src/themefiles/link.js\");\n/* harmony import */ var _Components_recentProject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Components/recentProject */ \"./packages/mdiedricks-theme/src/themefiles/Components/recentProject.js\");\n/* harmony import */ var _Components_recentPost__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Components/recentPost */ \"./packages/mdiedricks-theme/src/themefiles/Components/recentPost.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"5hhcs4-Home\",styles:\"text-align:center;;label:Home;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Home=(_ref2)=>{var{state,actions}=_ref2;// * retrieve posts from wp-api\nObject(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/logbook/\");actions.source.fetch(\"/projects/\");},[]);var posts=[];var projects=[];// * assign variable name to posts now stored in state\nvar postsData=state.source.get(\"/logbook/\");var projectsData=state.source.get(\"/projects/\");if(projectsData.isReady){projects=projectsData.items.slice(0,3).map((_ref3)=>{var{type,id}=_ref3;return state.source[type][id];});for(var obj of projects){obj.imageObj=state.source.attachment[obj.featured_media].source_url;}}if(postsData.isReady){posts=postsData.items.slice(0,3).map((_ref4)=>{var{type,id}=_ref4;return state.source[type][id];});}return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(HeroDiv,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MainText,null,\"Software Developer & Designer\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Paragraph,null,\"I enjoy building anything that involves code, electronics, computers and art! Have a look at some of my\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(TextLink,{href:\"#recent_projects\"},\" projects\"),\" o see what I've been\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(TextLink,{href:\"#recent_posts\"},\" writing\"),\" about lately.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(CTAButton,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"http://linkedin.com/in/mdiedricks/\",target:\"_blank\"},\"Get in touch!\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Divider,null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SectionTitle,{id:\"recent_projects\"},\"Recent Projects\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(ProjectDiv,null,projectsData.isReady?projects.map(proj=>Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Components_recentProject__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{proj:proj,key:proj.id})):null// TODO add \"loading\" article here\n),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(CTAButtonSml,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"/projects\"},\"Explore projects\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Divider,null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SectionTitle,{id:\"recent_posts\"},\"Recent logs\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(LogDiv,null,postsData.isReady?posts.map(post=>Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_Components_recentPost__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{post:post,key:post.id})):null// TODO add \"loading\" article here\n),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(CTAButtonSml,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"/logbook\"},\"Explore Logs\")));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Home));// * Colours\nvar bgcol=\"#0F0104\";// dark red\nvar col1=\"#529840\";// green\nvar col2=\"#DC4F31\";// red\nvar col3=\"#FFE6E0\";// white\n// * Typography ====\nvar SectionTitle=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h3\",{target:\"e1z0is2i0\",label:\"SectionTitle\"})(\"color:\",col2,\";margin:2rem 0;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var MainText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h1\",{target:\"e1z0is2i1\",label:\"MainText\"})( false?undefined:{name:\"vdrhqt\",styles:\"font-size:48px;padding:0 0 1rem 0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Paragraph=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e1z0is2i2\",label:\"Paragraph\"})( false?undefined:{name:\"eiqr1r\",styles:\"font-size:1.6rem;padding:1rem 0 1rem 0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TextLink=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"a\",{target:\"e1z0is2i3\",label:\"TextLink\"})(\"text-decoration:none;color:\",col1,\";transition:color 0.3s;:hover{color:\",col2,\";}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));// * Layout =====\nvar HeroDiv=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"section\",{target:\"e1z0is2i4\",label:\"HeroDiv\"})(\"color:\",col3,\";display:flex;flex-direction:column;text-align:center;justify-content:center;min-height:calc(100vh - 70px - 71px);padding:0 15%;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var ProjectDiv=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"section\",{target:\"e1z0is2i5\",label:\"ProjectDiv\"})( false?undefined:{name:\"hqcyck\",styles:\"min-height:calc(100vh - 70px - 71px);display:grid;grid-template-columns:1fr;column-gap:1rem;row-gap:1rem;@media (min-width:481px) and (max-width:768px){padding:0 0 2rem 0;}@media (min-width:768px) and (max-width:1200px){grid-template-columns:repeat(2,1fr);padding:0 2rem 2rem 2rem;}@media (min-width:1200px){grid-template-columns:repeat(3,1fr);padding:0 9rem 2rem 9rem;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LogDiv=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1z0is2i6\",label:\"LogDiv\"})( false?undefined:{name:\"73ztfw\",styles:\"min-height:calc(100vh - 70px - 71px);display:flex;flex-direction:column;@media (min-width:481px) and (max-width:768px){padding:0 0 2rem 0;}@media (min-width:768px) and (max-width:1200px){padding:0 2rem 2rem 2rem;}@media (min-width:1200px){padding:0 9rem 2rem 9rem;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Divider=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1z0is2i7\",label:\"Divider\"})(\"background-color:\",col2,\";height:1px;width:60%;margin:0 auto;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));// * Components =====\nvar CTAButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1z0is2i8\",label:\"CTAButton\"})(\"background-color:\",bgcol,\";border:1px solid \",col1,\";padding:12px 20px;margin:1.5rem auto;width:auto;text-align:center;cursor:pointer;:hover{border:1px solid \",col2,\";transform:border-color 0.3s;a{color:\",col2,\";transform:color 0.3s;}}a{text-decoration:none;color:\",col1,\";font-size:1.2rem;font-weight:bold;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var CTAButtonSml=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e1z0is2i9\",label:\"CTAButtonSml\"})(\"background-color:\",bgcol,\";border:1px solid \",col1,\";padding:8px 16px;margin:1.5rem auto;text-align:center;cursor:pointer;:hover{border:1px solid \",col2,\";transform:border-color 0.3s;a{color:\",col2,\";transform:color 0.3s;}}a{text-decoration:none;color:\",col1,\";font-size:0.8rem;font-weight:bold;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mdiedricks-theme/src/themefiles/home.js\n");

/***/ })

})