webpackHotUpdate("mdiedricks2.0",{

/***/ "./packages/mdiedricks-theme/src/themefiles/index.js":
/*!***********************************************************!*\
  !*** ./packages/mdiedricks-theme/src/themefiles/index.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./packages/mdiedricks-theme/node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _frontity_components_switch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @frontity/components/switch */ \"./node_modules/@frontity/components/switch.tsx\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./link */ \"./packages/mdiedricks-theme/src/themefiles/link.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./list */ \"./packages/mdiedricks-theme/src/themefiles/list.js\");\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./post */ \"./packages/mdiedricks-theme/src/themefiles/post.js\");\n/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./page */ \"./packages/mdiedricks-theme/src/themefiles/page.js\");\n/* harmony import */ var _contact__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./contact */ \"./packages/mdiedricks-theme/src/themefiles/contact.js\");\n/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./home */ \"./packages/mdiedricks-theme/src/themefiles/home.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}//by importing connect you make state available as props\n//it must also wrap the default export\n// Global - allows global css params\n//css is a function used for styles prop\n//Head allows your to add head tags foir SEO\nvar _ref= false?undefined:{name:\"17mv2hc-Root\",styles:\"@import url('https://fonts.googleapis.com/css2?family=Space+Mono&family=East+Sea+Dokdo&family=Work+Sans&display=swap');*{margin:0;padding:0;box-sizing:border-box;}html{background-color:#011006;font-family:'Work Sans',sans-serif;}nav a{}.quote{font-family:'East Sea Dokdo',cursive;};label:Root;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"grkscz-Root\",styles:\"display:flex;justify-content:space-between;align-items:center;;label:Root;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"1wg32fj-Root\",styles:\"position:absolute;;label:Root;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"1coynig-Root\",styles:\"display:flex;;label:Root;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Root=(_ref5)=>{var{state,actions}=_ref5;var data=state.source.get(state.router.link);return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"Global\"],{styles:_ref}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(frontity__WEBPACK_IMPORTED_MODULE_2__[\"Head\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"title\",null,\"mdiedricks - this is mission control\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Content,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Navbar,{isPostType:data.isPostType,css:_ref2},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavTitle,{href:\"/\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h2\",null,\"mdiedricks\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavSubtitle,null,\"this is mission control\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavMenuWide,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/\"},\"home\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/logbook\"},\"logbook\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/objective\"},\"objective\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/contact\"},\"contact\")),state.theme.isMenuOpen?Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavMenuShort,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MenuButton,{onClick:actions.theme.closeMenu},\"menu\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Navmenu,{className:\"dropMenu\",css:_ref3},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",{onClick:actions.theme.closeMenu},\"home\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/logbook\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",{onClick:actions.theme.closeMenu},\"logbook\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/objective\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",{onClick:actions.theme.closeMenu},\"objective\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavLink,{href:\"/contact\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",{onClick:actions.theme.closeMenu},\"contact\")))):Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(NavMenuShort,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MenuButton,{onClick:actions.theme.openMenu},\"menu\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"main\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_frontity_components_switch__WEBPACK_IMPORTED_MODULE_4__[\"default\"],null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_home__WEBPACK_IMPORTED_MODULE_10__[\"default\"],{when:data.isHome}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_list__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{when:data.isArchive}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_page__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{when:data.isPage}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_post__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{when:data.isPost}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_contact__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{when:data.isContact}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Footer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{css:_ref4},\"Contact me @ \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_link__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{to:\"https://github.com/mdiedricks\"},\"Github\")))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Root));// Colours\nvar bgcol=\"#011006\";// dark green\nvar col1=\"#529840\";// green\nvar col2=\"#DC4F31\";// red\nvar col3=\"#FFE6E0\";// white\n// * Typography =====\nvar NavTitle=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{target:\"e1q3rud30\",label:\"NavTitle\"})(\"color:\",col3,\";text-decoration:none;font-family:'Space Mono',monospace;font-weight:700;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var NavSubtitle=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"span\",{target:\"e1q3rud31\",label:\"NavSubtitle\"})( false?undefined:{name:\"8im1ub\",styles:\"font-family:'Work Sans',sans-serif;color:#FFE6E0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var NavLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{target:\"e1q3rud32\",label:\"NavLink\"})(\"color:\",col3,\";font-family:'Space Mono',monospace;text-decoration:none;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));// * Layout ===== \nvar Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1q3rud33\",label:\"Container\"})( false?undefined:{name:\"1v9bhmj\",styles:\"margin:0 0.5rem;@media(min-width:481px) and (max-width:768px){margin:0 3rem;}@media(min-width:768px) and (max-width:1024px){margin:0 4rem;}@media(min-width:1024px){margin:0 8rem;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1q3rud34\",label:\"Content\"})( false?undefined:{name:\"1ra50q3\",styles:\"min-height:calc(100vh - 70px);\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Navbar=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"header\",{target:\"e1q3rud35\",label:\"Navbar\"})(\"background-color:\",bgcol,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var Navmenu=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"nav\",{target:\"e1q3rud36\",label:\"Navmenu\"})(\"background-color:\",bgcol,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var Footer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1q3rud37\",label:\"Footer\"})(\"height:70px;color:\",col3,\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));// * Components =====\nvar NavMenuWide=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1q3rud38\",label:\"NavMenuWide\"})( false?undefined:{name:\"pjoxap\",styles:\"display:none;@media(min-width:768px){display:flex;margin:0 4rem;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var NavMenuShort=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1q3rud39\",label:\"NavMenuShort\"})( false?undefined:{name:\"12p84wy\",styles:\"@media(min-width:768px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var MenuButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e1q3rud310\",label:\"MenuButton\"})(\"font-family:'Space Mono',monospace;background-color:\",bgcol,\";border:1px solid \",col1,\";color:\",col1,\";padding:8px 8px;text-align:center;text-decoration:none;display:inline-block;cursor:pointer;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mdiedricks-theme/src/themefiles/index.js\n");

/***/ })

})